/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package de.espirit.sfcc.publication

import de.espirit.common.util.Listable
import de.espirit.firstspirit.access.store.IDProvider
import de.espirit.firstspirit.access.store.pagestore.Body
import de.espirit.firstspirit.access.store.pagestore.Section
import de.espirit.firstspirit.access.store.sitestore.PageRef
import de.espirit.firstspirit.agency.RenderingAgent
import de.espirit.firstspirit.generate.UrlFactory
import io.mockk.confirmVerified
import io.mockk.every
import io.mockk.mockk
import io.mockk.verify
import java.util.concurrent.CompletableFuture
import kotlin.test.Test

class PublisherTest {

    @Test fun testPublish() {
        val pageRef = mockk<PageRef>()
        val section = mockk<Section<*>>()
        val sectionListable = mockk<Listable<Section<*>>>()
        val renderingAgent = mockk<RenderingAgent>()
        val sfccObjectPublisher = mockk<SfccObjectPublisher>()

        every { sectionListable.iterator() } returns mutableListOf(section).iterator()
        every { sectionListable.toList() } returns listOf(section)
        every { pageRef.uid } returns "homepage"
        every { pageRef.getDisplayName(any()) } returns "Homepage"
        every { pageRef.page } returns mockk {
            every { getChildren(Section::class.java, true) } returns sectionListable
            every { formData } returns mockk {
                every { get(any(), "pt_sfcc_parentFolder") } returns mockk {
                    every { get() } returns "fs-global"
                }
            }
        }
        val sfccSiteId = "RefArchGlobal"
        every { section.id } returns 5362
        every { section.parent } returns mockk<Body>() {
            every { name } returns "homepage_main_m"
        }
        every { section.formData } returns mockk() {
            every { get(null, "st_sfccTemplate") } returns mockk() {
                every { get() } returns "slots/content/contentAssetBody.isml"
            }
        }

        every { renderingAgent.createRenderer(any<IDProvider>()) } returns mockk {
            every { render() } returns "<h1>This is my content asset!</h1>"
            every { urlFactory(any<UrlFactory>()) } returns this
            every { urlPrefix(any()) } returns this
            every { mediaLinkListener(any()) } returns this
        }

        every { sfccObjectPublisher.publishContentAsset(any(), any()) } returns CompletableFuture.completedFuture(null)
        every { sfccObjectPublisher.publishSlotConfiguration(any(), any()) } returns CompletableFuture.completedFuture(null)
        every { sfccObjectPublisher.publishMediaFile(any(), any(), any()) } returns CompletableFuture.completedFuture(null)

        val publisher = Publisher(renderingAgent, sfccObjectPublisher)
        publisher.publish(pageRef).get()

        val contentAsset = ContentAsset(
                id = "fs-homepage-5362",
                searchable = mapOf("default" to true),
                online = mapOf("default" to true),
                name = mapOf("default" to "Homepage"),
                classificationFolderId = "fs-global",
                body = mapOf("default" to BodySource("<h1>This is my content asset!</h1>"))
        )
        verify { sfccObjectPublisher.publishContentAsset(contentAsset, sfccSiteId) }

        val slotConfiguration = SlotConfiguration(
                configurationId = "fs_slot_configuration_5362",
                context = SlotConfigurationContext.GLOBAL,
                default = true,
                enabled = true,
                slotContent = ContentAssetSlotContent(setOf("fs-homepage-5362")),
                slotId = "homepage-main-m",
                template = "slots/content/contentAssetBody.isml",
                schedule = Schedule(null)
        )
        verify { sfccObjectPublisher.publishSlotConfiguration(slotConfiguration, sfccSiteId) }
        confirmVerified(sfccObjectPublisher)
    }
}
